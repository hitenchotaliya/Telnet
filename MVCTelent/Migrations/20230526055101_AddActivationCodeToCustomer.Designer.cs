// <auto-generated />
using System;
using MVCTelent.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MVCTelent.Migrations
{
    [DbContext(typeof(TelentDbContext))]
    [Migration("20230526055101_AddActivationCodeToCustomer")]
    partial class AddActivationCodeToCustomer
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MVCTelent.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("admin_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<bool?>("Isactive")
                        .HasColumnType("bit")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<string>("Uname")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("uname");

                    b.HasKey("AdminId");

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("MVCTelent.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CatImg")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cat_img");

                    b.Property<string>("CatName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cat_name");

                    b.Property<bool?>("Isactive")
                        .HasColumnType("bit")
                        .HasColumnName("isactive");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("MVCTelent.Models.City", b =>
                {
                    b.Property<int>("Cid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Cid"));

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("Sid")
                        .HasColumnType("int");

                    b.HasKey("Cid");

                    b.HasIndex("Sid");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("MVCTelent.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("ActivationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("city");

                    b.Property<string>("ContactNo")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("contact_no")
                        .IsFixedLength();

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<bool?>("Isactive")
                        .HasColumnType("bit")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("state");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("MVCTelent.Models.ImageGellery", b =>
                {
                    b.Property<int>("ImageGelleryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("image_gellery_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageGelleryId"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("GelleryName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("gellery_name");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ImageGelleryId");

                    b.HasIndex("UserId");

                    b.ToTable("ImageGellery", (string)null);
                });

            modelBuilder.Entity("MVCTelent.Models.ImageGelleryPic", b =>
                {
                    b.Property<int>("ImageGelleryPicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("image_gellery_pic_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageGelleryPicId"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("ImageGelleryId")
                        .HasColumnType("int")
                        .HasColumnName("image_gellery_id");

                    b.Property<string>("PicName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("pic_name");

                    b.HasKey("ImageGelleryPicId");

                    b.HasIndex("ImageGelleryId");

                    b.ToTable("ImageGelleryPics");
                });

            modelBuilder.Entity("MVCTelent.Models.State", b =>
                {
                    b.Property<int>("Sid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sid"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Sid");

                    b.ToTable("State", (string)null);
                });

            modelBuilder.Entity("MVCTelent.Models.TelentApply", b =>
                {
                    b.Property<int>("TelentApplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("telent_apply_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TelentApplyId"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<int?>("TelentReqId")
                        .HasColumnType("int")
                        .HasColumnName("telent_req_id");

                    b.HasKey("TelentApplyId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TelentReqId");

                    b.ToTable("TelentApply", (string)null);
                });

            modelBuilder.Entity("MVCTelent.Models.TelentFeedback", b =>
                {
                    b.Property<int>("TelentFeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("telent_feedback_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TelentFeedbackId"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<string>("Rating")
                        .HasColumnType("text")
                        .HasColumnName("rating");

                    b.Property<string>("Review")
                        .HasColumnType("text")
                        .HasColumnName("review");

                    b.HasKey("TelentFeedbackId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CustomerId");

                    b.ToTable("TelentFeedback", (string)null);
                });

            modelBuilder.Entity("MVCTelent.Models.TelentRequest", b =>
                {
                    b.Property<int>("TelentReqId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("telent_req_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TelentReqId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<long?>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("contact_person_name");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("from_date");

                    b.Property<string>("NoOfPerson")
                        .HasColumnType("text")
                        .HasColumnName("no_of_person");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime")
                        .HasColumnName("to_date");

                    b.HasKey("TelentReqId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CustomerId");

                    b.ToTable("TelentRequest", (string)null);
                });

            modelBuilder.Entity("MVCTelent.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("city");

                    b.Property<string>("ContactNo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("contactNo");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("Fname")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("fname");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("gender");

                    b.Property<bool?>("IsPaid")
                        .HasColumnType("bit")
                        .HasColumnName("is_paid");

                    b.Property<string>("Lname")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("lname");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime")
                        .HasColumnName("paid_date");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("state");

                    b.Property<DateTime?>("TrialEndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("trial_end_date");

                    b.HasKey("UserId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MVCTelent.Models.UserProfile", b =>
                {
                    b.Property<int>("UserProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_profile_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserProfileId"));

                    b.Property<int?>("ImageGelleryId")
                        .HasColumnType("int")
                        .HasColumnName("image_gellery_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int?>("VideoGelleryId")
                        .HasColumnType("int")
                        .HasColumnName("video_gellery_id");

                    b.HasKey("UserProfileId");

                    b.HasIndex("ImageGelleryId");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoGelleryId");

                    b.ToTable("UserProfile", (string)null);
                });

            modelBuilder.Entity("MVCTelent.Models.UserProfileDetail", b =>
                {
                    b.Property<int>("UserProfileDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_profile_detail_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserProfileDetailId"));

                    b.Property<string>("Certificate")
                        .HasColumnType("text")
                        .HasColumnName("certificate");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Education")
                        .HasColumnType("text")
                        .HasColumnName("education");

                    b.Property<string>("Experience")
                        .HasColumnType("text")
                        .HasColumnName("experience");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("UserProfileDetailId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProfileDetail", (string)null);
                });

            modelBuilder.Entity("MVCTelent.Models.VideoGellery", b =>
                {
                    b.Property<int>("VideoGelleryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("video_gellery_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VideoGelleryId"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("GelleryName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("gellery_name");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("VideoGelleryId");

                    b.HasIndex("UserId");

                    b.ToTable("VideoGellery", (string)null);
                });

            modelBuilder.Entity("MVCTelent.Models.VideoGelleryVideo", b =>
                {
                    b.Property<int>("VideoGelleryVideoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("video_gellery_video_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VideoGelleryVideoId"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("VideoGelleryId")
                        .HasColumnType("int")
                        .HasColumnName("video_gellery_id");

                    b.Property<string>("VideoLink")
                        .HasColumnType("text")
                        .HasColumnName("video_link");

                    b.HasKey("VideoGelleryVideoId");

                    b.HasIndex("VideoGelleryId");

                    b.ToTable("VideoGelleryVideos");
                });

            modelBuilder.Entity("MVCTelent.Models.City", b =>
                {
                    b.HasOne("MVCTelent.Models.State", "SidNavigation")
                        .WithMany("Cities")
                        .HasForeignKey("Sid")
                        .HasConstraintName("FK_City_State");

                    b.Navigation("SidNavigation");
                });

            modelBuilder.Entity("MVCTelent.Models.ImageGellery", b =>
                {
                    b.HasOne("MVCTelent.Models.User", "User")
                        .WithMany("ImageGelleries")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_ImageGellery_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MVCTelent.Models.ImageGelleryPic", b =>
                {
                    b.HasOne("MVCTelent.Models.ImageGellery", "ImageGellery")
                        .WithMany("ImageGelleryPics")
                        .HasForeignKey("ImageGelleryId")
                        .HasConstraintName("FK_ImageGelleryPics_ImageGellery");

                    b.Navigation("ImageGellery");
                });

            modelBuilder.Entity("MVCTelent.Models.TelentApply", b =>
                {
                    b.HasOne("MVCTelent.Models.Category", "Category")
                        .WithMany("TelentApplies")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_TelentApply_Category");

                    b.HasOne("MVCTelent.Models.TelentRequest", "TelentReq")
                        .WithMany("TelentApplies")
                        .HasForeignKey("TelentReqId")
                        .HasConstraintName("FK_TelentApply_TelentRequest");

                    b.Navigation("Category");

                    b.Navigation("TelentReq");
                });

            modelBuilder.Entity("MVCTelent.Models.TelentFeedback", b =>
                {
                    b.HasOne("MVCTelent.Models.Category", "Category")
                        .WithMany("TelentFeedbacks")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_TelentFeedback_Category");

                    b.HasOne("MVCTelent.Models.Customer", "Customer")
                        .WithMany("TelentFeedbacks")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_TelentFeedback_Customers");

                    b.Navigation("Category");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("MVCTelent.Models.TelentRequest", b =>
                {
                    b.HasOne("MVCTelent.Models.Category", "Category")
                        .WithMany("TelentRequests")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_TelentRequest_Category");

                    b.HasOne("MVCTelent.Models.Customer", "Customer")
                        .WithMany("TelentRequests")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_TelentRequest_Customers");

                    b.Navigation("Category");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("MVCTelent.Models.User", b =>
                {
                    b.HasOne("MVCTelent.Models.Category", "Category")
                        .WithMany("Users")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Users_Category");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MVCTelent.Models.UserProfile", b =>
                {
                    b.HasOne("MVCTelent.Models.ImageGellery", "ImageGellery")
                        .WithMany("UserProfiles")
                        .HasForeignKey("ImageGelleryId")
                        .HasConstraintName("FK_UserProfile_ImageGellery");

                    b.HasOne("MVCTelent.Models.User", "User")
                        .WithMany("UserProfiles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserProfile_Users");

                    b.HasOne("MVCTelent.Models.VideoGellery", "VideoGellery")
                        .WithMany()
                        .HasForeignKey("VideoGelleryId");

                    b.Navigation("ImageGellery");

                    b.Navigation("User");

                    b.Navigation("VideoGellery");
                });

            modelBuilder.Entity("MVCTelent.Models.UserProfileDetail", b =>
                {
                    b.HasOne("MVCTelent.Models.User", "User")
                        .WithMany("UserProfileDetails")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserProfileDetail_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MVCTelent.Models.VideoGellery", b =>
                {
                    b.HasOne("MVCTelent.Models.User", "User")
                        .WithMany("VideoGelleries")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_VideoGellery_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MVCTelent.Models.VideoGelleryVideo", b =>
                {
                    b.HasOne("MVCTelent.Models.VideoGellery", "VideoGellery")
                        .WithMany("VideoGelleryVideos")
                        .HasForeignKey("VideoGelleryId")
                        .HasConstraintName("FK_VideoGelleryVideos_VideoGellery");

                    b.Navigation("VideoGellery");
                });

            modelBuilder.Entity("MVCTelent.Models.Category", b =>
                {
                    b.Navigation("TelentApplies");

                    b.Navigation("TelentFeedbacks");

                    b.Navigation("TelentRequests");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MVCTelent.Models.Customer", b =>
                {
                    b.Navigation("TelentFeedbacks");

                    b.Navigation("TelentRequests");
                });

            modelBuilder.Entity("MVCTelent.Models.ImageGellery", b =>
                {
                    b.Navigation("ImageGelleryPics");

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("MVCTelent.Models.State", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("MVCTelent.Models.TelentRequest", b =>
                {
                    b.Navigation("TelentApplies");
                });

            modelBuilder.Entity("MVCTelent.Models.User", b =>
                {
                    b.Navigation("ImageGelleries");

                    b.Navigation("UserProfileDetails");

                    b.Navigation("UserProfiles");

                    b.Navigation("VideoGelleries");
                });

            modelBuilder.Entity("MVCTelent.Models.VideoGellery", b =>
                {
                    b.Navigation("VideoGelleryVideos");
                });
#pragma warning restore 612, 618
        }
    }
}
